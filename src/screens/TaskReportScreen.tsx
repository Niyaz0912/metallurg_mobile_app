import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TextInput, 
  TouchableOpacity, 
  Alert, 
  ScrollView,
  KeyboardAvoidingView,
  Platform 
} from 'react-native';
import { ShiftAssignment } from '../types/assignments';

interface TaskReportScreenProps {
  route: {
    params: {
      assignment: ShiftAssignment;
      onReportSuccess: (assignmentId: number, completedQuantity: number) => void;
    };
  };
  navigation: {
    goBack: () => void;
  };
}

export default function TaskReportScreen({ route, navigation }: TaskReportScreenProps) {
  const { assignment, onReportSuccess } = route.params;
  const [completedQuantity, setCompletedQuantity] = useState('');
  const [comment, setComment] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const remaining = assignment.quantity - assignment.completedQuantity;
  const maxAllowed = remaining;

  const handleSubmit = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const quantity = parseInt(completedQuantity);
    
    if (!completedQuantity || isNaN(quantity)) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
      return;
    }

    if (quantity <= 0) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    if (quantity > maxAllowed) {
      Alert.alert(
        '–û—à–∏–±–∫–∞', 
        `–ù–µ–ª—å–∑—è —Å–¥–∞—Ç—å –±–æ–ª—å—à–µ ${maxAllowed} —à—Ç (–æ—Å—Ç–∞–ª–æ—Å—å –∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é)`
      );
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    Alert.alert(
      '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
      `–û—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${quantity} —à—Ç?`,
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { 
          text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 
          onPress: async () => {
            setIsSubmitting(true);
            
            try {
              // –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± —É—Å–ø–µ—Ö–µ
              onReportSuccess(assignment.id, quantity);
              
              Alert.alert(
                '–£—Å–ø–µ—Ö!', 
                `–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–¥–∞–Ω–æ: ${quantity} —à—Ç`,
                [{ 
                  text: 'OK', 
                  onPress: () => navigation.goBack() 
                }]
              );
              
            } catch (error) {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç');
            } finally {
              setIsSubmitting(false);
            }
          }
        }
      ]
    );
  };

  const currentProgress = Math.round((assignment.completedQuantity / assignment.quantity) * 100);
  const newQuantity = parseInt(completedQuantity) || 0;
  const newTotal = assignment.completedQuantity + newQuantity;
  const newProgress = Math.round((newTotal / assignment.quantity) * 100);

  return (
    <KeyboardAvoidingView 
      style={styles.container} 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backButtonText}>‚Üê –ù–∞–∑–∞–¥</Text>
          </TouchableOpacity>
          <Text style={styles.title}>–û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏</Text>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ */}
        <View style={styles.assignmentCard}>
          <Text style={styles.taskNumber}>–ó–∞–¥–∞–Ω–∏–µ #{assignment.taskNumber}</Text>
          <Text style={styles.productName}>{assignment.productName}</Text>
          <Text style={styles.customer}>–ó–∞–∫–∞–∑—á–∏–∫: {assignment.customerName}</Text>
          <Text style={styles.order}>–ó–∞–∫–∞–∑: {assignment.orderName}</Text>
          
          <View style={styles.progressInfo}>
            <Text style={styles.progressLabel}>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</Text>
            <Text style={styles.progressText}>
              {assignment.completedQuantity}/{assignment.quantity} —à—Ç ({currentProgress}%)
            </Text>
            <View style={styles.progressBar}>
              <View 
                style={[
                  styles.progressFill, 
                  { width: `${currentProgress}%`, backgroundColor: '#3b82f6' }
                ]} 
              />
            </View>
          </View>
        </View>

        {/* –§–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–∞ */}
        <View style={styles.formCard}>
          <Text style={styles.formTitle}>üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞</Text>
          
          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
          <View style={styles.inputSection}>
            <Text style={styles.inputLabel}>–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –∑–∞ —Å–º–µ–Ω—É *</Text>
            <Text style={styles.inputHint}>
              –ú–∞–∫—Å–∏–º—É–º: {maxAllowed} —à—Ç (–æ—Å—Ç–∞–ª–æ—Å—å –∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é)
            </Text>
            <TextInput
              style={styles.quantityInput}
              value={completedQuantity}
              onChangeText={setCompletedQuantity}
              placeholder="0"
              keyboardType="numeric"
              maxLength={6}
            />
          </View>

          {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç */}
          {newQuantity > 0 && (
            <View style={styles.previewCard}>
              <Text style={styles.previewTitle}>üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</Text>
              <Text style={styles.previewText}>
                –ë—É–¥–µ—Ç —Å–¥–∞–Ω–æ: {newTotal}/{assignment.quantity} —à—Ç ({newProgress}%)
              </Text>
              <View style={styles.progressBar}>
                <View 
                  style={[
                    styles.progressFill, 
                    { 
                      width: `${Math.min(newProgress, 100)}%`, 
                      backgroundColor: newProgress >= 100 ? '#10b981' : '#3b82f6' 
                    }
                  ]} 
                />
              </View>
            </View>
          )}

          {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
          <View style={styles.inputSection}>
            <Text style={styles.inputLabel}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Text>
            <TextInput
              style={styles.commentInput}
              value={comment}
              onChangeText={setComment}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∑–∞–º–µ—á–∞–Ω–∏—è..."
              multiline={true}
              numberOfLines={3}
            />
          </View>

          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          <TouchableOpacity 
            style={[
              styles.submitButton,
              (!completedQuantity || isSubmitting) && styles.submitButtonDisabled
            ]}
            onPress={handleSubmit}
            disabled={!completedQuantity || isSubmitting}
          >
            <Text style={styles.submitButtonText}>
              {isSubmitting ? 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...' : '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç'}
            </Text>
          </TouchableOpacity>

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
          <View style={styles.warningCard}>
            <Text style={styles.warningTitle}>‚ö†Ô∏è –í–∞–∂–Ω–æ:</Text>
            <Text style={styles.warningText}>
              ‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å
            </Text>
            <Text style={styles.warningText}>
              ‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –≤ —Ç–µ—Ö–∫–∞—Ä—Ç–∞—Ö –∏ –ø–ª–∞–Ω–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            </Text>
            <Text style={styles.warningText}>
              ‚Ä¢ –ú–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            </Text>
          </View>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    backgroundColor: '#ffffff',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButton: {
    marginRight: 16,
    padding: 8,
  },
  backButtonText: {
    fontSize: 16,
    color: '#3b82f6',
    fontWeight: '500',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  assignmentCard: {
    backgroundColor: '#ffffff',
    margin: 16,
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  taskNumber: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 4,
  },
  productName: {
    fontSize: 16,
    color: '#374151',
    marginBottom: 8,
  },
  customer: {
    fontSize: 14,
    color: '#64748b',
    marginBottom: 2,
  },
  order: {
    fontSize: 14,
    color: '#64748b',
    marginBottom: 16,
  },
  progressInfo: {
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
    paddingTop: 16,
  },
  progressLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
    marginBottom: 4,
  },
  progressText: {
    fontSize: 16,
    color: '#1f2937',
    marginBottom: 8,
  },
  progressBar: {
    height: 8,
    backgroundColor: '#e5e7eb',
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    borderRadius: 4,
  },
  formCard: {
    backgroundColor: '#ffffff',
    margin: 16,
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  formTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 20,
  },
  inputSection: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
    marginBottom: 4,
  },
  inputHint: {
    fontSize: 12,
    color: '#64748b',
    marginBottom: 8,
  },
  quantityInput: {
    borderWidth: 2,
    borderColor: '#d1d5db',
    borderRadius: 8,
    padding: 16,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    backgroundColor: '#ffffff',
  },
  commentInput: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#ffffff',
    minHeight: 80,
    textAlignVertical: 'top',
  },
  previewCard: {
    backgroundColor: '#eff6ff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#bfdbfe',
  },
  previewTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1e40af',
    marginBottom: 8,
  },
  previewText: {
    fontSize: 16,
    color: '#1f2937',
    marginBottom: 12,
  },
  submitButton: {
    backgroundColor: '#10b981',
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 20,
  },
  submitButtonDisabled: {
    backgroundColor: '#9ca3af',
    opacity: 0.6,
  },
  submitButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  warningCard: {
    backgroundColor: '#fffbeb',
    borderRadius: 8,
    padding: 16,
    borderWidth: 1,
    borderColor: '#fed7aa',
  },
  warningTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#92400e',
    marginBottom: 8,
  },
  warningText: {
    fontSize: 12,
    color: '#78350f',
    marginBottom: 4,
  },
});
